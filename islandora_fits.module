<?php

/**
 * @file
 * The main fits module file. Contains most of the hook implementations.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\CacheableMetadata;

/**
 * Implements hook_theme().
 */
function islandora_fits_theme() {
  return [
    'islandora_fits_metadata_display' => [
      'variables' => ['islandora_object' => NULL, 'islandora_fits_table' => NULL],
    ],
  ];
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_fits_islandora_derivative() {
  $derivatives = [];
  if (\Drupal::config('islandora_fits.settings')->get('islandora_fits_do_derivatives')) {
    $derivatives[] = [
      'source_dsid' => 'OBJ',
      'destination_dsid' => \Drupal::config('islandora_fits.settings')->get('islandora_fits_techmd_dsid'),
      'weight' => '0',
      'function' => [
        'islandora_fits_create_techmd',
      ],
      'file' => drupal_get_path('module', 'islandora_fits') . '/includes/derivatives.inc',
    ];
  }
  return $derivatives;
}

/**
 * Implements hook_CMODEL_PID_islandora_derivative().
 */
function islandora_fits_ir_citationcmodel_islandora_derivative() {
  return [
    [
      'source_dsid' => 'PDF',
      'destination_dsid' => \Drupal::config('islandora_fits.settings')->get('islandora_fits_techmd_dsid'),
      'weight' => '0.01',
      'function' => [
        'islandora_fits_create_techmd',
      ],
      'file' => drupal_get_path('module', 'islandora_fits') . '/includes/derivatives.inc',
    ],
  ];
}

/**
 * Access callback for the FITS metadata display.
 */
function islandora_fits_metadata_access($object) {
  return islandora_datastream_access(
    'view technical metadata',
    $object[\Drupal::config('islandora_fits.settings')->get('islandora_fits_techmd_dsid')]
  );
}

/**
 * Preprocess function that processes the TECHMD datastream and for output.
 */
function template_preprocess_islandora_fits_metadata_display(array &$variables) {
  $object = $variables['islandora_object'];
  $techmd_ds = $object[\Drupal::config('islandora_fits.settings')->get('islandora_fits_techmd_dsid')]->content;
  $xml = new SimpleXMLElement($techmd_ds);
  $xml->registerXPathNamespace('fits', 'http://hul.harvard.edu/ois/xml/ns/fits/fits_output');
  $fits_metadata = islandora_fits_child_xpath($xml);
  $headers = [
    'label' => t('Field'),
    'value' => t('Value'),
  ];
  if (count($fits_metadata) == 0) {
    $variables['islandora_fits_table']['empty'] = '';
    $variables['islandora_fits_fieldsets']['empty'] = [
      '#type' => 'markup',
      '#markup' => t('No technical metadata found.'),
    ];
  }
  else {
    foreach ($fits_metadata as $tool_name => $vals_array) {
      $variables['islandora_fits_data'][$tool_name] = [];
      $rows = & $variables['islandora_fits_data'][$tool_name];
      foreach ($vals_array as $field => $val_array) {
        if (!array_key_exists($field, $rows)) {
          $rows[$field] = [
            ['data' => Html::escape($field), 'class' => 'islandora_fits_table_labels'],
          ];
          foreach ($val_array as $value) {
            if (!isset($rows[$field]['value'])) {
              $rows[$field]['value'] = ['data' => Html::escape($value), 'class' => 'islandora_fits_table_values'];
            }
            else {
              $rows[$field]['value'] = ['data' => $rows[$field]['value']['data'] .= '<br />' . Html::escape($value), 'class' => 'islandora_fits_table_values'];
            }
          }
        }
        $table_attributes = ['class' => ['islandora_fits_table']];

        $table = [
          'header' => $headers,
          'rows' => $rows,
          'attributes' => $table_attributes,
        ];
        $variables['islandora_fits_table'][$tool_name] = $table;
        $variables['islandora_fits_fieldsets'][$tool_name] = [
          '#type' => 'fieldset',
          '#title' => $tool_name,
          '#collapsed' => TRUE,
          'table' => [
            '#type' => 'table',
            '#header' => $headers,
            '#rows' => $rows,
            '#attributes' => $table_attributes,
          ],
        ];
      }
    }
  }
}

/**
 * Menu callback function.
 *
 * @param AbstractObject $object
 *   The Islandora object to display the metadata for.
 *
 * @return string
 *   The marked up output for display in Drupal.
 */
function islandora_fits_metadata_display(AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/breadcrumb');

  $cache_meta = (new CacheableMetadata())
    ->addCacheableDependency($object);

  $display = [
    '#theme' => 'islandora_fits_metadata_display',
    '#islandora_object' => $object,
    '#attached' => [
      'library' => ['islandora_fits/fits-css'],
    ],
  ];

  $cache_meta->applyTo($display);

  return $display;
}

/**
 * Finds the the first set of children from the TECHMD datastream.
 *
 * One it has these it passes them off recursively.
 *
 * @param SimpleXMLElement $xml
 *   The SimpleXMLElement to parse.
 *
 * @return array
 *   An array containing key/value pairs of fields and data.
 */
function islandora_fits_child_xpath(SimpleXMLElement $xml) {
  $results = $xml->xpath('/*|/*/fits:metadata');
  $output = [];
  foreach ($results as $result) {
    islandora_fits_children($result, $output);
  }
  return $output;
}

/**
 * Finds children for fits module.
 *
 * Recursive function that searches continously until we a leaf
 * at which point we grab the node's text value and add to
 * the output array.
 *
 * @param SimpleXMLElement $child
 *   The current child that we are searching through.
 * @param array $output
 *   An array containing key/value pairs of fields and data.
 */
function islandora_fits_children(SimpleXMLElement $child, array &$output) {
  $grandchildren = $child->xpath('*/*');

  if (count($grandchildren) > 0) {
    foreach ($grandchildren as $grandchild) {
      islandora_fits_children($grandchild, $output);
    }
  }
  else {
    $text_results = $child->xpath('text()');
    $tool_name = FALSE;
    if ($text_results) {
      foreach ($text_results as $text) {
        foreach ($text->attributes() as $key => $value) {
          if ($key === 'toolname') {
            $tool_name = trim((string) $value);
          }
        }
        $output_text = trim((string) $text);
        if (!empty($output_text)) {
          $fits_out = islandora_fits_construct_output($child->getName(), $tool_name);
          $tool_label = $fits_out['tool'];
          $field_label = $fits_out['name'];
          // Need to check if the label already exists in our output
          // such that we do not duplicate entries.
          if ($tool_label) {
            if (isset($output[$tool_label])) {
              if (!array_key_exists($field_label, $output[$tool_label])) {
                $output[$tool_label][$field_label][] = $output_text;
              }
              else {
                if (!in_array($output_text, $output[$tool_label][$field_label])) {
                  $output[$tool_label][$field_label][] = $output_text;
                }
              }
            }
            else {
              $output[$tool_label][$field_label][] = $output_text;
            }
          }
          // No tool attribute.
          else {
            if (isset($output['Unknown'][$field_label])) {
              if (!in_array($output_text, $output['Unknown'][$field_label])) {
                $output['Unknown'][$field_label][] = $output_text;
              }
            }
            else {
              $output['Unknown'][$field_label][] = $output_text;
            }
          }
        }
      }
    }
  }
}

/**
 * Builds display by parsing strings.
 *
 * @param string $node_name
 *   Name of the current node that we will display.
 * @param string $tool_name
 *   Name of the tool used to generate the metadata.
 *
 * @return string
 *   Constructed node name for output.
 */
function islandora_fits_construct_output($node_name, $tool_name) {
  // Construct an arbitrary string with all capitals in it.
  $capitals = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  $name_array = str_split($node_name);
  $space_position = [];

  // Check to see which characters are capitals so we can split
  // them up for cleaner display.
  foreach ($name_array as $key => $value) {
    if (strpos($capitals, $value) !== FALSE && $key !== 0) {
      $space_position[] = $key;
    }
  }
  if (count($space_position)) {
    // Needed in event we add multiple spaces so need to keep track.
    $pos_offset = 0;
    foreach ($space_position as $pos) {
      $node_name = substr_replace($node_name, ' ', $pos + $pos_offset, 0);
      $pos_offset++;
    }
  }
  $node_name = ucwords($node_name);

  return ['name' => $node_name, 'tool' => ucwords($tool_name)];
}

/**
 * Implements hook_help().
 */
function islandora_fits_help($route) {
  switch ($route) {
    // Main help page for the module.
    case 'help.page.islandora_fits':
      // About section.
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t(
        'The Islandora FITS module works behind the scenes using the File Information Tool Set (FITS) to create technical metadata datastreams for objects ingested into Islandora. See the <a href=":wiki">Islandora FITS wiki*</a> for more information.', [
          ':wiki' => 'https://wiki.duraspace.org/display/ISLANDORA/Islandora+FITS',
        ]
      ) .
      '</p>';
      // Uses section.
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dt>' . t('Acquiring Technical Metadata') . '</dt><dd>' . t(
        'As a user, provided that this module has been configured correctly, you do not need to do anything to make it gather technical metadata. If you have access to the "Manage" tab for any given object that has been ingested after the installation of this module, you can access the "Datastreams" section of the "Manage" tab and view the TECHMD datastream to see what this module produces.'
      ) .
      '</dd>';

      $output .= '</br></br><p>' . t(
        '*Links go to documentation for the Drupal 7 version of the module, as documentation for the Drupal 8 version of the module has not yet been written. There may be some small discrepencies; however, most key points remain useful.') .
      '</p>';
      return $output;
  }
}
